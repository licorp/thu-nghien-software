#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DEBUG D√íNG 27 - STD ARRAY TEE CONFLICT
=====================================

D√≤ng 27: F=150-900 | G=150.0 | K=STD ARRAY TEE
L·ªói: "Groove_Thread c·∫ßn FAB Pipe 'Groove_Thread', c√≥ 'STD ARRAY TEE'"

V·∫•n ƒë·ªÅ: T·∫°i sao STD ARRAY TEE l·∫°i b·ªã check nh∆∞ Groove_Thread?
"""

import pandas as pd
import sys
import os

# Import validator
sys.path.append('.')
from excel_validator_final import ExcelValidator

def debug_dong_27():
    """
    Debug d√≤ng 27 ƒë·ªÉ t√¨m hi·ªÉu t·∫°i sao STD ARRAY TEE l·∫°i conflict
    """
    print("üêõ DEBUG D√íNG 27 - STD ARRAY TEE CONFLICT")
    print("=" * 60)
    
    # T·∫°o validator
    validator = ExcelValidator()
    
    # D·ªØ li·ªáu t·ª´ d√≤ng 27
    row_data = {
        'item_description': '150-900',          # F=150-900
        'size': '150.0',                        # G=150.0  
        'fab_pipe': 'STD ARRAY TEE',           # K=STD ARRAY TEE
        'end_1': 'UNKNOWN',                    # L=? (c·∫ßn t√¨m hi·ªÉu)
        'end_2': 'UNKNOWN'                     # M=? (c·∫ßn t√¨m hi·ªÉu)
    }
    
    print("üìä D·ªÆ LI·ªÜU D√íNG 27:")
    print("-" * 30)
    for key, value in row_data.items():
        print(f"  {key}: {value}")
    print()
    
    # Test case 1: V·ªõi End-1, End-2 kh√¥ng x√°c ƒë·ªãnh
    print("üîç TEST 1: End-1, End-2 = UNKNOWN")
    row = pd.Series(row_data)
    result1 = validator._check_pipe_schedule_mapping(
        row, 'item_description', 'size', 'fab_pipe', 'end_1', 'end_2'
    )
    print(f"K·∫øt qu·∫£: {result1}")
    print()
    
    # Test case 2: V·ªõi End-1=RG, End-2=RG (c√≥ th·ªÉ g√¢y conflict)
    print("üîç TEST 2: End-1=RG, End-2=RG (c√≥ th·ªÉ g√¢y conflict)")
    row_data_rg = row_data.copy()
    row_data_rg['end_1'] = 'RG'
    row_data_rg['end_2'] = 'RG'
    
    row = pd.Series(row_data_rg)
    result2 = validator._check_pipe_schedule_mapping(
        row, 'item_description', 'size', 'fab_pipe', 'end_1', 'end_2'
    )
    print(f"K·∫øt qu·∫£: {result2}")
    print()
    
    # Test case 3: V·ªõi End-1=BE, End-2=BE
    print("üîç TEST 3: End-1=BE, End-2=BE")
    row_data_be = row_data.copy()
    row_data_be['end_1'] = 'BE'
    row_data_be['end_2'] = 'BE'
    
    row = pd.Series(row_data_be)
    result3 = validator._check_pipe_schedule_mapping(
        row, 'item_description', 'size', 'fab_pipe', 'end_1', 'end_2'
    )
    print(f"K·∫øt qu·∫£: {result3}")
    print()
    
    # Test case 4: V·ªõi End-1=TH, End-2=TH
    print("üîç TEST 4: End-1=TH, End-2=TH")
    row_data_th = row_data.copy()
    row_data_th['end_1'] = 'TH'
    row_data_th['end_2'] = 'TH'
    
    row = pd.Series(row_data_th)
    result4 = validator._check_pipe_schedule_mapping(
        row, 'item_description', 'size', 'fab_pipe', 'end_1', 'end_2'
    )
    print(f"K·∫øt qu·∫£: {result4}")
    print()
    
    print("üéØ PH√ÇN T√çCH:")
    print("-" * 30)
    print("‚úÖ LOGIC ƒê√öNG: size 150 + '900' ‚Üí STD ARRAY TEE (∆∞u ti√™n cao)")
    print("‚ùå V·∫§N ƒê·ªÄ: C√≥ th·ªÉ End-1/End-2 ƒëang g√¢y conflict v·ªõi logic ∆∞u ti√™n th·∫•p")
    print()
    print("üîç C·∫¶N KI·ªÇM TRA:")
    print("1. End-1, End-2 th·ª±c t·∫ø c·ªßa d√≤ng 27 l√† g√¨?")
    print("2. Logic c√≥ ƒëang check ∆∞u ti√™n th·∫•p tr∆∞·ªõc ∆∞u ti√™n cao?")

if __name__ == "__main__":
    debug_dong_27()
