#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from pathlib import Path

def test_pipe_treatment_validation():
    """
    Test chi ti·∫øt Pipe Treatment validation
    """
    excel_file = 'Xp02-Fabrication & Listing.xlsx'
    
    # 3 worksheet c·∫ßn ki·ªÉm tra Pipe Treatment
    target_worksheets = [
        'Pipe Schedule', 
        'Pipe Fitting Schedule', 
        'Pipe Accessory Schedule'
    ]
    
    xl_file = pd.ExcelFile(excel_file)
    
    print("=== TEST CHI TI·∫æT PIPE TREATMENT VALIDATION ===")
    print(f"File: {excel_file}")
    print("Quy t·∫Øc:")
    print("  - CP-INTERNAL ‚Üí GAL")
    print("  - CP-EXTERNAL, CW-DISTRIBUTION, CW-ARRAY ‚Üí BLACK")
    print()
    
    for sheet_name in target_worksheets:
        print(f"{'='*60}")
        print(f"WORKSHEET: {sheet_name}")
        print(f"{'='*60}")
        
        # ƒê·ªçc worksheet
        df = pd.read_excel(excel_file, sheet_name=sheet_name)
        
        # C·ªôt C (index 2) = EE_System Type
        # C·ªôt T (index 19) = EE_Pipe Treatment
        col_c_name = df.columns[2]  # EE_System Type
        col_t_name = df.columns[19]  # EE_Pipe Treatment
        
        print(f"C·ªôt C: {col_c_name}")
        print(f"C·ªôt T: {col_t_name}")
        print()
        
        # Ph√¢n t√≠ch c√°c gi√° tr·ªã unique
        print("üìä PH√ÇN T√çCH GI√Å TR·ªä UNIQUE:")
        system_types = df[col_c_name].value_counts()
        treatments = df[col_t_name].value_counts()
        
        print(f"System Types (C·ªôt C):")
        for sys_type, count in system_types.items():
            print(f"  {sys_type}: {count} d√≤ng")
        
        print(f"\nPipe Treatments (C·ªôt T):")
        for treatment, count in treatments.items():
            print(f"  {treatment}: {count} d√≤ng")
        
        # Test validation chi ti·∫øt
        print(f"\nüß™ TEST VALIDATION CHI TI·∫æT:")
        
        pass_count = 0
        fail_count = 0
        skip_count = 0
        error_details = []
        
        for idx, row in df.iterrows():
            system_type = row[col_c_name]
            pipe_treatment = row[col_t_name]
            
            # Ki·ªÉm tra d·ªØ li·ªáu
            if pd.isna(system_type) or pd.isna(pipe_treatment):
                skip_count += 1
                continue
            
            system_type_str = str(system_type).strip()
            pipe_treatment_str = str(pipe_treatment).strip()
            
            # √Åp d·ª•ng quy t·∫Øc
            expected_treatment = None
            if system_type_str == "CP-INTERNAL":
                expected_treatment = "GAL"
            elif system_type_str in ["CP-EXTERNAL", "CW-DISTRIBUTION", "CW-ARRAY"]:
                expected_treatment = "BLACK"
            
            if expected_treatment:
                if pipe_treatment_str == expected_treatment:
                    pass_count += 1
                else:
                    fail_count += 1
                    error_details.append({
                        'row': idx + 2,
                        'system_type': system_type_str,
                        'expected': expected_treatment,
                        'actual': pipe_treatment_str
                    })
            else:
                # Kh√¥ng √°p d·ª•ng rule cho system type kh√°c
                pass_count += 1
        
        # Th·ªëng k√™
        total_checked = pass_count + fail_count
        print(f"‚úÖ PASS: {pass_count}/{total_checked} ({pass_count/total_checked*100:.1f}%)")
        print(f"‚ùå FAIL: {fail_count}/{total_checked} ({fail_count/total_checked*100:.1f}%)")
        print(f"‚è≠Ô∏è SKIP: {skip_count} d√≤ng (thi·∫øu d·ªØ li·ªáu)")
        
        # Hi·ªÉn th·ªã l·ªói chi ti·∫øt
        if error_details:
            print(f"\n‚ùå CHI TI·∫æT C√ÅC L·ªñI (t·ªëi ƒëa 10 d√≤ng ƒë·∫ßu):")
            for error in error_details[:10]:
                print(f"  D√≤ng {error['row']:3d}: {error['system_type']} ‚Üí c·∫ßn '{error['expected']}', c√≥ '{error['actual']}'")
        
        # Hi·ªÉn th·ªã ma tr·∫≠n k·∫øt h·ª£p
        print(f"\nüìã MA TR·∫¨N SYSTEM TYPE vs PIPE TREATMENT:")
        matrix = df.groupby([col_c_name, col_t_name]).size().reset_index(name='count')
        for _, row in matrix.iterrows():
            sys_type = row[col_c_name]
            treatment = row[col_t_name]
            count = row['count']
            
            # Ki·ªÉm tra c√≥ ƒë√∫ng quy t·∫Øc kh√¥ng
            is_correct = False
            if str(sys_type) == "CP-INTERNAL" and str(treatment) == "GAL":
                is_correct = True
            elif str(sys_type) in ["CP-EXTERNAL", "CW-DISTRIBUTION", "CW-ARRAY"] and str(treatment) == "BLACK":
                is_correct = True
            elif str(sys_type) not in ["CP-INTERNAL", "CP-EXTERNAL", "CW-DISTRIBUTION", "CW-ARRAY"]:
                is_correct = True  # Kh√¥ng √°p d·ª•ng rule
            
            status = "‚úÖ" if is_correct else "‚ùå"
            print(f"  {status} {sys_type} + {treatment}: {count} d√≤ng")
        
        print()

if __name__ == "__main__":
    test_pipe_treatment_validation()
