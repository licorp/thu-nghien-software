#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Excel Validator Tool
Double-click ƒë·ªÉ ch·∫°y tr√™n Windows
"""

import pandas as pd
import os
import sys
from pathlib import Path
from datetime import datetime

def main():
    """
    H√†m main ƒë·ªÉ ch·∫°y Excel validator
    """
    try:
        print("="*50)
        print("          EXCEL VALIDATOR TOOL")
        print("="*50)
        print()
        
        # T·ª± ƒë·ªông t√¨m file Excel trong th∆∞ m·ª•c hi·ªán t·∫°i
        current_dir = Path(__file__).parent
        os.chdir(current_dir)  # ƒê·∫£m b·∫£o working directory ƒë√∫ng
        
        excel_files = [f for f in current_dir.glob("*.xlsx") 
                      if not f.name.startswith('~') 
                      and 'validation' not in f.name.lower()]
        
        if not excel_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file Excel!")
            input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
            return
        
        print("üìÅ File Excel c√≥ s·∫µn:")
        for i, file in enumerate(excel_files, 1):
            print(f"   {i}. {file.name}")
        print()
        
        # Ch·ªçn file
        while True:
            try:
                choice = input(f"Ch·ªçn file (1-{len(excel_files)}) ho·∫∑c 'q' ƒë·ªÉ tho√°t: ").strip()
                if choice.lower() == 'q':
                    return
                choice = int(choice) - 1
                if 0 <= choice < len(excel_files):
                    break
                else:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        selected_file = excel_files[choice]
        print(f"\nüîç ƒêang x·ª≠ l√Ω file: {selected_file.name}")
        print("-" * 50)
        
        # Validate file
        result = validate_excel_file(selected_file)
        
        if result:
            print("\n" + "="*50)
            print("‚úÖ X·ª¨ L√ù TH√ÄNH C√îNG!")
            print("="*50)
        else:
            print("\n" + "="*50)
            print("‚ùå C√ì L·ªñI X·∫¢Y RA!")
            print("="*50)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng!")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")
    finally:
        input("\nNh·∫•n Enter ƒë·ªÉ ƒë√≥ng...")

def validate_excel_file(excel_file_path):
    """
    Validate Excel file v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
    """
    try:
        # ƒê·ªçc file Excel
        df = pd.read_excel(excel_file_path)
        
        print(f"üìä Th√¥ng tin file:")
        print(f"   - S·ªë d√≤ng: {len(df)}")
        print(f"   - S·ªë c·ªôt: {len(df.columns)}")
        
        # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        required_columns = ['EE_Item Description', 'Size', 'EE_FAB Pipe', 'EE_PIPE END-1', 'EE_PIPE END-2']
        missing_cols = [col for col in required_columns if col not in df.columns]
        
        if missing_cols:
            print(f"‚ùå Thi·∫øu c·ªôt: {missing_cols}")
            return False
        
        print("‚úÖ T√¨m th·∫•y t·∫•t c·∫£ c·ªôt c·∫ßn thi·∫øt!")
        print("\nüîç ƒêang th·ª±c hi·ªán validation...")
        
        # √Åp d·ª•ng validation
        df['Validation_Check'] = df.apply(validate_row, axis=1)
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        total_rows = len(df)
        pass_rows = df[df['Validation_Check'] == 'PASS']
        fail_rows = df[df['Validation_Check'] != 'PASS']
        
        print(f"\nüìà K·∫æT QU·∫¢ VALIDATION:")
        print(f"   ‚úÖ PASS: {len(pass_rows)}/{total_rows} ({len(pass_rows)/total_rows*100:.1f}%)")
        print(f"   ‚ùå FAIL: {len(fail_rows)}/{total_rows} ({len(fail_rows)/total_rows*100:.1f}%)")
        
        # Hi·ªÉn th·ªã m·ªôt s·ªë l·ªói m·∫´u
        if not fail_rows.empty:
            print(f"\n‚ö†Ô∏è M·ªôt s·ªë l·ªói t√¨m th·∫•y:")
            for idx, row in fail_rows.head(3).iterrows():
                item_desc = str(row.get('EE_Item Description', 'N/A'))[:20]
                fab_pipe = str(row.get('EE_FAB Pipe', 'N/A'))[:20]
                validation_result = str(row['Validation_Check'])[:60]
                print(f"   D√≤ng {idx+2}: {item_desc} | {validation_result}")
        
        # Xu·∫•t file k·∫øt qu·∫£
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"validation_result_{timestamp}.xlsx"
        df.to_excel(output_file, index=False)
        print(f"\nüíæ File k·∫øt qu·∫£: {output_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω: {e}")
        return False

def validate_row(row):
    """
    Validate t·ª´ng d√≤ng theo business rules
    """
    try:
        # L·∫•y d·ªØ li·ªáu
        fab_pipe = str(row.get('EE_FAB Pipe', '')).strip() if pd.notna(row.get('EE_FAB Pipe')) else ''
        pipe_end1 = str(row.get('EE_PIPE END-1', '')).strip() if pd.notna(row.get('EE_PIPE END-1')) else ''
        pipe_end2 = str(row.get('EE_PIPE END-2', '')).strip() if pd.notna(row.get('EE_PIPE END-2')) else ''
        size = row.get('Size', '')
        
        errors = []
        
        # Ki·ªÉm tra tr∆∞·ªùng b·∫Øt bu·ªôc
        if not fab_pipe:
            errors.append("FAB Pipe tr·ªëng")
        if not pipe_end1:
            errors.append("END-1 tr·ªëng") 
        if not pipe_end2:
            errors.append("END-2 tr·ªëng")
        
        # Ki·ªÉm tra Size
        if pd.isna(size) or (isinstance(size, (int, float)) and size <= 0):
            errors.append("Size kh√¥ng h·ª£p l·ªá")
        
        # Business rules
        if 'Groove_Thread' in fab_pipe and pipe_end1 != pipe_end2:
            errors.append(f"Groove_Thread: {pipe_end1}‚â†{pipe_end2}")
        
        if 'STD' in fab_pipe and 'PAP RANGE' in fab_pipe:
            if pipe_end1 != 'RG' or pipe_end2 != 'BE':
                errors.append(f"STD PAP: c·∫ßn RG-BE, c√≥ {pipe_end1}-{pipe_end2}")
        
        if 'STD ARRAY TEE' in fab_pipe and (pipe_end1 != 'RG' or pipe_end2 != 'RG'):
            errors.append(f"STD ARRAY: c·∫ßn RG-RG, c√≥ {pipe_end1}-{pipe_end2}")
        
        if 'Fabrication' in fab_pipe and (pipe_end1 != 'RG' or pipe_end2 != 'BE'):
            errors.append(f"Fabrication: c·∫ßn RG-BE, c√≥ {pipe_end1}-{pipe_end2}")
        
        return "PASS" if not errors else f"FAIL: {'; '.join(errors[:2])}"
        
    except Exception as e:
        return f"ERROR: {str(e)}"

if __name__ == "__main__":
    main()
