import pandas as pd
import os
from pathlib import Path
from datetime import datetime

def validate_with_custom_conditions(excel_file_path):
    """
    Validate Excel v·ªõi ƒëi·ªÅu ki·ªán c·ª• th·ªÉ t·ª´ h√¨nh ·∫£nh
    """
    try:
        # ƒê·ªçc file Excel
        df = pd.read_excel(excel_file_path)
        
        print("=== B·∫ÆT ƒê·∫¶U VALIDATION ===")
        print(f"File: {excel_file_path}")
        print(f"S·ªë d√≤ng: {len(df)}")
        print(f"C√°c c·ªôt: {list(df.columns)}")
        
        # T√¨m c√°c c·ªôt c·∫ßn thi·∫øt
        required_columns = ['EE_Item Description', 'Size', 'EE_FAB Pipe', 'EE_PIPE END-1', 'EE_PIPE END-2', 'Check', 'Ghi ch√∫']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"‚ùå Thi·∫øu c√°c c·ªôt: {missing_columns}")
            print("ƒêang t√¨m c·ªôt t∆∞∆°ng t·ª±...")
            # Hi·ªÉn th·ªã t·∫•t c·∫£ c·ªôt ƒë·ªÉ user ch·ªçn
            for i, col in enumerate(df.columns):
                print(f"{i+1}. {col}")
            return None
        
        # √Åp d·ª•ng validation
        df['Validation_Result'] = df.apply(lambda row: check_validation_conditions(row), axis=1)
        
        # T·∫°o file k·∫øt qu·∫£ v·ªõi timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"validation_result_{timestamp}.xlsx"
        
        # Xu·∫•t k·∫øt qu·∫£
        df.to_excel(output_file, index=False)
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        total_rows = len(df)
        pass_count = len(df[df['Validation_Result'] == 'PASS'])
        fail_count = total_rows - pass_count
        
        print(f"\n=== K·∫æT QU·∫¢ VALIDATION ===")
        print(f"‚úÖ PASS: {pass_count}/{total_rows} ({pass_count/total_rows*100:.1f}%)")
        print(f"‚ùå FAIL: {fail_count}/{total_rows} ({fail_count/total_rows*100:.1f}%)")
        print(f"üìÅ File k·∫øt qu·∫£: {output_file}")
        
        # Hi·ªÉn th·ªã m·ªôt s·ªë l·ªói m·∫´u
        failed_rows = df[df['Validation_Result'] != 'PASS']
        if not failed_rows.empty:
            print(f"\nM·ªôt s·ªë l·ªói ph·ªï bi·∫øn:")
            for idx, row in failed_rows.head(3).iterrows():
                print(f"D√≤ng {idx+2}: {row['Validation_Result']}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return None

def check_validation_conditions(row):
    """
    Ki·ªÉm tra ƒëi·ªÅu ki·ªán validation theo business logic
    """
    try:
        # L·∫•y gi√° tr·ªã
        item_desc = str(row.get('EE_Item Description', '')).strip() if pd.notna(row.get('EE_Item Description')) else ''
        size = row.get('Size', '')
        fab_pipe = str(row.get('EE_FAB Pipe', '')).strip() if pd.notna(row.get('EE_FAB Pipe')) else ''
        pipe_end1 = str(row.get('EE_PIPE END-1', '')).strip() if pd.notna(row.get('EE_PIPE END-1')) else ''
        pipe_end2 = str(row.get('EE_PIPE END-2', '')).strip() if pd.notna(row.get('EE_PIPE END-2')) else ''
        check_status = row.get('Check', False)
        ghi_chu = str(row.get('Ghi ch√∫', '')).strip() if pd.notna(row.get('Ghi ch√∫')) else ''
        
        errors = []
        
        # Rule 1: Groove_Thread - END-1 v√† END-2 ph·∫£i gi·ªëng nhau
        if 'Groove_Thread' in fab_pipe and pipe_end1 != pipe_end2:
            errors.append(f"Groove_Thread: END-1({pipe_end1}) ‚â† END-2({pipe_end2})")
        
        # Rule 2: STD PAP RANGE - RG-BE pattern
        if 'STD' in fab_pipe and 'PAP RANGE' in fab_pipe:
            if pipe_end1 != 'RG':
                errors.append(f"STD PAP: END-1 c·∫ßn RG, c√≥ {pipe_end1}")
            if pipe_end2 != 'BE':
                errors.append(f"STD PAP: END-2 c·∫ßn BE, c√≥ {pipe_end2}")
        
        # Rule 3: STD ARRAY TEE - RG-RG pattern  
        if 'STD ARRAY TEE' in fab_pipe:
            if pipe_end1 != 'RG' or pipe_end2 != 'RG':
                errors.append(f"STD ARRAY: c·∫ßn RG-RG, c√≥ {pipe_end1}-{pipe_end2}")
        
        # Rule 4: Fabrication - RG-BE + ghi ch√∫
        if 'Fabrication' in fab_pipe:
            if pipe_end1 != 'RG':
                errors.append(f"Fabrication: END-1 c·∫ßn RG, c√≥ {pipe_end1}")
            if pipe_end2 != 'BE':
                errors.append(f"Fabrication: END-2 c·∫ßn BE, c√≥ {pipe_end2}")
            if 'kh√¥ng t√¢m C·ªët G' not in ghi_chu:
                errors.append("Fabrication: thi·∫øu ghi ch√∫ 'kh√¥ng t√¢m C·ªët G'")
        
        # Rule 5: Groove c·∫ßn ghi ch√∫
        if 'Groove' in fab_pipe and 'kh√¥ng t√¢m C·ªët G' not in ghi_chu:
            errors.append("Groove: c·∫ßn ghi ch√∫ 'kh√¥ng t√¢m C·ªët G'")
        
        # Rule 6: Check ph·∫£i TRUE
        if not check_status:
            errors.append("Check ‚â† TRUE")
            
        # Rule 7: Size validation
        if pd.isna(size) or (isinstance(size, str) and size.strip() == '') or (isinstance(size, (int, float)) and size <= 0):
            errors.append("Size kh√¥ng h·ª£p l·ªá")
        
        return "PASS" if not errors else f"FAIL: {'; '.join(errors)}"
        
    except Exception as e:
        return f"ERROR: {str(e)}"

if __name__ == "__main__":
    # T√¨m file Excel
    current_dir = Path(".")
    excel_files = list(current_dir.glob("*.xlsx")) + list(current_dir.glob("*.xls"))
    excel_files = [f for f in excel_files if not f.name.startswith('~') and 'validation' not in f.name.lower()]
    
    if not excel_files:
        print("Kh√¥ng t√¨m th·∫•y file Excel!")
        exit()
    
    print("File Excel c√≥ s·∫µn:")
    for i, file in enumerate(excel_files, 1):
        print(f"{i}. {file.name}")
    
    try:
        choice = int(input(f"Ch·ªçn file (1-{len(excel_files)}): ")) - 1
        selected_file = excel_files[choice]
        validate_with_custom_conditions(selected_file)
    except (ValueError, IndexError):
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
