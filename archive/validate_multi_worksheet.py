#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import os
from pathlib import Path
from datetime import datetime

def validate_excel_multi_worksheets(excel_file_path):
    """
    Validate Excel file v·ªõi nhi·ªÅu worksheet, √°p d·ª•ng Array Number validation ch·ªâ cho 4 worksheet c·ª• th·ªÉ
    """
    try:
        # C√°c worksheet c·∫ßn √°p d·ª•ng Array Number validation
        target_worksheets = [
            'Pipe Schedule', 
            'Pipe Fitting Schedule', 
            'Pipe Accessory Schedule', 
            'Sprinkler Schedule'
        ]
        
        xl_file = pd.ExcelFile(excel_file_path)
        
        print("=== PH√ÇN T√çCH FILE EXCEL MULTI-WORKSHEET ===")
        print(f"File: {excel_file_path}")
        print(f"S·ªë worksheet: {len(xl_file.sheet_names)}")
        print(f"Target worksheets: {target_worksheets}")
        print()
        
        all_results = {}
        total_pass = 0
        total_fail = 0
        total_rows = 0
        
        # X·ª≠ l√Ω t·ª´ng worksheet
        for sheet_name in xl_file.sheet_names:
            print(f"=== WORKSHEET: {sheet_name} ===")
            
            # ƒê·ªçc worksheet
            df = pd.read_excel(excel_file_path, sheet_name=sheet_name)
            print(f"S·ªë d√≤ng: {len(df)}, S·ªë c·ªôt: {len(df.columns)}")
            
            # Ki·ªÉm tra c√≥ √°p d·ª•ng Array Number validation kh√¥ng
            apply_array_validation = sheet_name in target_worksheets
            print(f"Array Number validation: {'‚úÖ √ÅP D·ª§NG' if apply_array_validation else '‚ùå KH√îNG √ÅP D·ª§NG'}")
            
            # √Åp d·ª•ng validation
            df['Validation_Check'] = df.apply(
                lambda row: validate_row_conditions(row, apply_array_validation=apply_array_validation), 
                axis=1
            )
            
            # Th·ªëng k√™ worksheet
            sheet_total = len(df)
            sheet_pass = len(df[df['Validation_Check'] == 'PASS'])
            sheet_fail = len(df[df['Validation_Check'] != 'PASS'])
            
            print(f"‚úÖ PASS: {sheet_pass}/{sheet_total} ({sheet_pass/sheet_total*100:.1f}%)")
            print(f"‚ùå FAIL: {sheet_fail}/{sheet_total} ({sheet_fail/sheet_total*100:.1f}%)")
            
            # C·ªông d·ªìn
            total_rows += sheet_total
            total_pass += sheet_pass  
            total_fail += sheet_fail
            
            # L∆∞u k·∫øt qu·∫£
            all_results[sheet_name] = df
            
            # Hi·ªÉn th·ªã m·ªôt s·ªë l·ªói m·∫´u
            fail_rows = df[df['Validation_Check'] != 'PASS']
            if not fail_rows.empty:
                print(f"L·ªói m·∫´u (5 d√≤ng ƒë·∫ßu):")
                for idx, row in fail_rows.head(5).iterrows():
                    item_desc = row.get('EE_Item Description', 'N/A')
                    fab_pipe = row.get('EE_FAB Pipe', 'N/A')
                    validation_result = row['Validation_Check']
                    print(f"  D√≤ng {idx+2:3d}: {item_desc} | {fab_pipe} | {validation_result}")
            
            print()
        
        # Th·ªëng k√™ t·ªïng
        print("=== T·ªîNG K·∫æT T·∫§T C·∫¢ WORKSHEET ===")
        print(f"‚úÖ PASS: {total_pass}/{total_rows} ({total_pass/total_rows*100:.1f}%)")
        print(f"‚ùå FAIL: {total_fail}/{total_rows} ({total_fail/total_rows*100:.1f}%)")
        
        # Xu·∫•t file k·∫øt qu·∫£
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"validation_multi_worksheet_{timestamp}.xlsx"
        
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            for sheet_name, df in all_results.items():
                df.to_excel(writer, sheet_name=sheet_name, index=False)
        
        print(f"\nüìÅ File k·∫øt qu·∫£ ƒë√£ l∆∞u: {output_file}")
        
        return all_results
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return None

def validate_row_conditions(row, apply_array_validation=True):
    """
    Validate t·ª´ng d√≤ng d·ªØ li·ªáu theo business rules
    """
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c c·ªôt
        item_desc = str(row.get('EE_Item Description', '')).strip() if pd.notna(row.get('EE_Item Description')) else ''
        size = row.get('Size', '')
        fab_pipe = str(row.get('EE_FAB Pipe', '')).strip() if pd.notna(row.get('EE_FAB Pipe')) else ''
        pipe_end1 = str(row.get('EE_PIPE END-1', '')).strip() if pd.notna(row.get('EE_PIPE END-1')) else ''
        pipe_end2 = str(row.get('EE_PIPE END-2', '')).strip() if pd.notna(row.get('EE_PIPE END-2')) else ''
        
        errors = []
        
        # Rule 1: Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if not fab_pipe:
            errors.append("EE_FAB Pipe tr·ªëng")
        if not pipe_end1:
            errors.append("EE_PIPE END-1 tr·ªëng") 
        if not pipe_end2:
            errors.append("EE_PIPE END-2 tr·ªëng")
        
        # Rule 2: Ki·ªÉm tra Size h·ª£p l·ªá
        if pd.isna(size) or (isinstance(size, str) and size.strip() == ''):
            errors.append("Size tr·ªëng")
        elif isinstance(size, (int, float)) and size <= 0:
            errors.append("Size ‚â§ 0")
        
        # Rule 3: Business logic cho Groove_Thread
        if 'Groove_Thread' in fab_pipe:
            if pipe_end1 != pipe_end2:
                errors.append(f"Groove_Thread: END-1({pipe_end1}) ‚â† END-2({pipe_end2})")
        
        # Rule 4: Business logic cho STD PAP RANGE
        if 'STD' in fab_pipe and 'PAP RANGE' in fab_pipe:
            if pipe_end1 != 'RG':
                errors.append(f"STD PAP RANGE: END-1 c·∫ßn RG, c√≥ {pipe_end1}")
            if pipe_end2 != 'BE':
                errors.append(f"STD PAP RANGE: END-2 c·∫ßn BE, c√≥ {pipe_end2}")
        
        # Rule 5: Business logic cho STD ARRAY TEE
        if 'STD ARRAY TEE' in fab_pipe:
            if pipe_end1 != 'RG' or pipe_end2 != 'RG':
                errors.append(f"STD ARRAY TEE: c·∫ßn RG-RG, c√≥ {pipe_end1}-{pipe_end2}")
        
        # Rule 6: Business logic cho Fabrication
        if 'Fabrication' in fab_pipe:
            if pipe_end1 != 'RG':
                errors.append(f"Fabrication: END-1 c·∫ßn RG, c√≥ {pipe_end1}")
            if pipe_end2 != 'BE':
                errors.append(f"Fabrication: END-2 c·∫ßn BE, c√≥ {pipe_end2}")
        
        # Rule 8: Ki·ªÉm tra EE_Item Description = Size + "-" + Length (l√†m tr√≤n 5)
        length = row.get('Length', '')
        if pd.notna(length) and pd.notna(size) and length != '' and size != '':
            try:
                # L√†m tr√≤n Length v·ªõi b·ªôi s·ªë c·ªßa 5
                length_rounded = round(float(length) / 5) * 5
                # T·∫°o expected value: Size + "-" + Length_rounded
                expected_item_desc = f"{int(size)}-{int(length_rounded)}"
                
                # So s√°nh v·ªõi EE_Item Description th·ª±c t·∫ø
                actual_item_desc = str(row.get('EE_Item Description', '')).strip()
                if actual_item_desc != expected_item_desc:
                    errors.append(f"Item Description: c·∫ßn '{expected_item_desc}', c√≥ '{actual_item_desc}'")
            except (ValueError, TypeError):
                errors.append("Kh√¥ng th·ªÉ t√≠nh Item Description (Size/Length l·ªói)")
        
        # Rule 9: CH·ªà √ÅP D·ª§NG CHO 4 WORKSHEET C·ª§ TH·ªÇ - Ki·ªÉm tra EE_Array Number
        if apply_array_validation:
            cross_passage = row.get('EE_Cross Passage', '')  # C·ªôt A
            location_lanes = row.get('EE_Location and Lanes', '')  # C·ªôt B  
            array_number = row.get('EE_Array Number', '')  # C·ªôt D
            
            if pd.notna(cross_passage) and pd.notna(location_lanes) and pd.notna(array_number):
                try:
                    # L·∫•y 2 s·ªë cu·ªëi c·ªßa c·ªôt B (EE_Location and Lanes)
                    location_str = str(location_lanes).strip()
                    # T√¨m s·ªë trong string, l·∫•y 2 s·ªë cu·ªëi
                    import re
                    numbers_in_location = re.findall(r'\d+', location_str)
                    if numbers_in_location:
                        last_2_b = numbers_in_location[-1][-2:] if len(numbers_in_location[-1]) >= 2 else numbers_in_location[-1].zfill(2)
                    else:
                        last_2_b = "00"
                    
                    # L·∫•y 2 s·ªë cu·ªëi c·ªßa c·ªôt A (EE_Cross Passage)
                    cross_str = str(cross_passage).strip()
                    numbers_in_cross = re.findall(r'\d+', cross_str)
                    if numbers_in_cross:
                        last_2_a = numbers_in_cross[-1][-2:] if len(numbers_in_cross[-1]) >= 2 else numbers_in_cross[-1].zfill(2)
                    else:
                        last_2_a = "00"
                    
                    # T·∫°o expected pattern (ph·∫£i ch·ª©a trong array number)
                    required_pattern = f"EXP6{last_2_b}{last_2_a}"
                    actual_array = str(array_number).strip()
                    
                    # Ki·ªÉm tra xem array number c√≥ ch·ª©a pattern b·∫Øt bu·ªôc kh√¥ng
                    if required_pattern not in actual_array:
                        errors.append(f"Array Number: ph·∫£i ch·ª©a '{required_pattern}', c√≥ '{actual_array}'")
                        
                except Exception as e:
                    errors.append(f"Kh√¥ng th·ªÉ t√≠nh Array Number: {str(e)}")
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        if errors:
            return f"FAIL: {'; '.join(errors[:2])}"  # Ch·ªâ hi·ªÉn th·ªã 2 l·ªói ƒë·∫ßu ƒë·ªÉ kh√¥ng qu√° d√†i
        else:
            return "PASS"
            
    except Exception as e:
        return f"ERROR: {str(e)}"

if __name__ == "__main__":
    # T·ª± ƒë·ªông t√¨m file Excel
    current_dir = Path(".")
    excel_files = [f for f in current_dir.glob("*.xlsx") if not f.name.startswith('~') and 'validation' not in f.name.lower()]
    
    if not excel_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file Excel!")
        exit()
    
    print("üìÅ File Excel c√≥ s·∫µn:")
    for i, file in enumerate(excel_files, 1):
        print(f"{i}. {file.name}")
    
    try:
        choice = int(input(f"\nCh·ªçn file (1-{len(excel_files)}): ")) - 1
        selected_file = excel_files[choice]
        validate_excel_multi_worksheets(selected_file)
    except (ValueError, IndexError):
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒê√£ h·ªßy!")
