#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXCEL VALIDATION TOOL - ENHANCED WITH END-1/END-2 RULES
=======================================================

Tool validation Excel cho d·ª± √°n pipe/equipment data v·ªõi 4 quy t·∫Øc ENHANCED:

1. Array Number Validation (4 worksheet):
   - Pipe Schedule, Pipe Fitting Schedule, Pipe Accessory Schedule, Sprinkler Schedule
   - Quy t·∫Øc: Array Number ph·∫£i CH·ª®A Cross Passage value (Fixed logic)

2. Pipe Treatment Validation (3 worksheet):
   - Pipe Schedule, Pipe Fitting Schedule, Pipe Accessory Schedule  
   - Quy t·∫Øc:
     * CP-INTERNAL ‚Üí GAL
     * CP-EXTERNAL, CW-DISTRIBUTION, CW-ARRAY ‚Üí BLACK

3. CP-INTERNAL Array Number Validation (3 worksheet):
   - Pipe Schedule, Pipe Fitting Schedule, Pipe Accessory Schedule
   - Quy t·∫Øc: Khi EE_System Type = "CP-INTERNAL" th√¨ EE_Array Number ph·∫£i tr√πng v·ªõi EE_Cross Passage

4. Pipe Schedule Mapping Validation - ENHANCED (1 worksheet):
   - Pipe Schedule
   - Quy t·∫Øc:
     * Item Description "150-900" ‚Üí FAB Pipe "STD ARRAY TEE"
     * Item Description "65-4730" ‚Üí FAB Pipe "STD 1 PAP RANGE"
     * Item Description "65-5295" ‚Üí FAB Pipe "STD 2 PAP RANGE"
     * Size "40" ‚Üí FAB Pipe "Groove_Thread"
     * üÜï N·∫øu c·ªôt (L) End-1 = "BE" ho·∫∑c c·ªôt (M) End-2 = "BE": "Fabrication"
     * üÜï N·∫øu c·∫£ End-1 v√† End-2 ƒë·ªÅu thu·ªôc ["RG", "TH"]: "Groove_Thread"

T√°c gi·∫£: GitHub Copilot
Ng√†y t·∫°o: 2025-06-10 - ENHANCED VERSION
"""

import pandas as pd
import re
import os
from pathlib import Path
from datetime import datetime

class ExcelValidatorEnhanced:
    """
    Class ch√≠nh cho Excel validation v·ªõi ƒë·∫ßy ƒë·ªß c√°c quy t·∫Øc ENHANCED
    """
    
    def __init__(self):
        # C·∫•u h√¨nh worksheet
        self.array_number_worksheets = [
            'Pipe Schedule', 
            'Pipe Fitting Schedule', 
            'Pipe Accessory Schedule', 
            'Sprinkler Schedule'
        ]
        
        self.pipe_treatment_worksheets = [
            'Pipe Schedule', 
            'Pipe Fitting Schedule', 
            'Pipe Accessory Schedule'
        ]
        
        # CP-INTERNAL Array Number worksheets (Rule 3)
        self.cp_internal_worksheets = [
            'Pipe Schedule', 
            'Pipe Fitting Schedule', 
            'Pipe Accessory Schedule'
        ]
        
        # Pipe Schedule Mapping worksheets (Rule 4) - ENHANCED
        self.pipe_schedule_mapping_worksheets = [
            'Pipe Schedule'
        ]
        
        # Th·ªëng k√™ validation
        self.total_rows = 0
        self.total_pass = 0
        self.total_fail = 0
        self.validation_results = {}
    
    def validate_excel_file(self, excel_file_path):
        """
        Validate to√†n b·ªô file Excel v·ªõi t·∫•t c·∫£ c√°c quy t·∫Øc ENHANCED
        """
        try:
            print("=" * 80)
            print("üöÄ EXCEL VALIDATION TOOL - 4 RULES ENHANCED")
            print("=" * 80)
            print(f"üìÅ File: {excel_file_path}")
            print(f"üïê Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print()
            
            # ƒê·ªçc Excel file
            xl_file = pd.ExcelFile(excel_file_path)
            
            print("üìã C√ÅC QUY T·∫ÆC VALIDATION:")
            print("1. Array Number Validation:")
            print(f"   - Worksheets: {', '.join(self.array_number_worksheets)}")
            print("   - Quy t·∫Øc: Array Number ph·∫£i CH·ª®A Cross Passage value")
            print("2. Pipe Treatment Validation:")
            print(f"   - Worksheets: {', '.join(self.pipe_treatment_worksheets)}")
            print("   - Quy t·∫Øc: CP-INTERNAL‚ÜíGAL, CP-EXTERNAL/CW-DISTRIBUTION/CW-ARRAY‚ÜíBLACK")
            print("3. CP-INTERNAL Array Number Validation:")
            print("   - Worksheets: Pipe Schedule, Pipe Fitting Schedule, Pipe Accessory Schedule")
            print("   - Quy t·∫Øc: Khi EE_System Type = 'CP-INTERNAL' th√¨ EE_Array Number ph·∫£i tr√πng EE_Cross Passage")
            print("4. Pipe Schedule Mapping Validation - üÜï ENHANCED:")
            print("   - Worksheet: Pipe Schedule")
            print("   - Quy t·∫Øc c≈©: Item Description/Size mapping v·ªõi FAB Pipe")
            print("   - üÜï M·ªöI: End-1/End-2 = 'BE' ‚Üí 'Fabrication'")
            print("   - üÜï M·ªöI: End-1 & End-2 thu·ªôc ['RG','TH'] ‚Üí 'Groove_Thread'")
            print()
            
            # X·ª≠ l√Ω t·ª´ng worksheet
            for sheet_name in xl_file.sheet_names:
                self._validate_worksheet(excel_file_path, sheet_name)
            
            # T·ªïng k·∫øt v√† xu·∫•t file
            self._generate_summary()
            output_file = self._export_results(excel_file_path)
            
            return output_file
            
        except Exception as e:
            print(f"‚ùå L·ªói validation: {e}")
            return None
    
    def _validate_worksheet(self, excel_file_path, sheet_name):
        """
        Validate m·ªôt worksheet c·ª• th·ªÉ v·ªõi t·∫•t c·∫£ c√°c quy t·∫Øc ENHANCED
        """
        print(f"üìä WORKSHEET: {sheet_name}")
        print("-" * 50)
        
        # ƒê·ªçc worksheet
        df = pd.read_excel(excel_file_path, sheet_name=sheet_name)
        print(f"S·ªë d√≤ng: {len(df)}, S·ªë c·ªôt: {len(df.columns)}")
        
        # Ki·ªÉm tra worksheet n√†o c·∫ßn validation g√¨
        apply_array_validation = sheet_name in self.array_number_worksheets
        apply_pipe_treatment_validation = sheet_name in self.pipe_treatment_worksheets
        apply_cp_internal_validation = sheet_name in self.cp_internal_worksheets
        apply_pipe_schedule_mapping_validation = sheet_name in self.pipe_schedule_mapping_worksheets
        
        print(f"Array Number validation: {'‚úÖ √ÅP D·ª§NG' if apply_array_validation else '‚ùå KH√îNG √ÅP D·ª§NG'}")
        print(f"Pipe Treatment validation: {'‚úÖ √ÅP D·ª§NG' if apply_pipe_treatment_validation else '‚ùå KH√îNG √ÅP D·ª§NG'}")
        print(f"CP-INTERNAL Array validation: {'‚úÖ √ÅP D·ª§NG' if apply_cp_internal_validation else '‚ùå KH√îNG √ÅP D·ª§NG'}")
        print(f"Pipe Schedule Mapping validation: {'‚úÖ √ÅP D·ª§NG - ENHANCED' if apply_pipe_schedule_mapping_validation else '‚ùå KH√îNG √ÅP D·ª§NG'}")
        
        if not any([apply_array_validation, apply_pipe_treatment_validation, apply_cp_internal_validation, apply_pipe_schedule_mapping_validation]):
            print("‚è≠Ô∏è B·ªè qua worksheet (kh√¥ng c√≥ quy t·∫Øc n√†o √°p d·ª•ng)")
            print()
            return
        
        # L·∫•y t√™n c·ªôt theo v·ªã tr√≠
        col_a_name = df.columns[0] if len(df.columns) > 0 else None  # EE_Cross Passage
        col_b_name = df.columns[1] if len(df.columns) > 1 else None  # EE_Location and Lanes  
        col_c_name = df.columns[2] if len(df.columns) > 2 else None  # EE_System Type
        col_d_name = df.columns[3] if len(df.columns) > 3 else None  # EE_Array Number
        col_f_name = df.columns[5] if len(df.columns) > 5 else None  # EE_Item Description
        col_g_name = df.columns[6] if len(df.columns) > 6 else None  # EE_Size
        col_k_name = df.columns[10] if len(df.columns) > 10 else None  # EE_FAB Pipe
        col_l_name = df.columns[11] if len(df.columns) > 11 else None  # EE_End-1
        col_m_name = df.columns[12] if len(df.columns) > 12 else None  # EE_End-2
        col_t_name = df.columns[19] if len(df.columns) > 19 else None  # EE_Pipe Treatment
        
        # √Åp d·ª•ng validation
        df['Validation_Check'] = df.apply(
            lambda row: self._validate_row(
                row, 
                col_a_name, col_b_name, col_c_name, col_d_name, col_f_name, col_g_name, col_k_name, col_l_name, col_m_name, col_t_name,
                apply_array_validation, apply_pipe_treatment_validation, apply_cp_internal_validation, apply_pipe_schedule_mapping_validation
            ), 
            axis=1
        )
        
        # Th·ªëng k√™ worksheet
        sheet_total = len(df)
        sheet_pass = len(df[df['Validation_Check'] == 'PASS'])
        sheet_fail = len(df[df['Validation_Check'] != 'PASS'])
        
        print(f"‚úÖ PASS: {sheet_pass}/{sheet_total} ({sheet_pass/sheet_total*100:.1f}%)")
        print(f"‚ùå FAIL: {sheet_fail}/{sheet_total} ({sheet_fail/sheet_total*100:.1f}%)")
        
        # C·ªông d·ªìn th·ªëng k√™
        self.total_rows += sheet_total
        self.total_pass += sheet_pass  
        self.total_fail += sheet_fail
        
        # L∆∞u k·∫øt qu·∫£
        self.validation_results[sheet_name] = df
        
        # Hi·ªÉn th·ªã l·ªói m·∫´u
        self._show_sample_errors(df, sheet_name, col_c_name, col_d_name, col_f_name, col_g_name, col_k_name, col_l_name, col_m_name, col_t_name)
        print()

    def _validate_row(self, row, col_a_name, col_b_name, col_c_name, col_d_name, col_f_name, col_g_name, col_k_name, col_l_name, col_m_name, col_t_name, 
                     apply_array_validation, apply_pipe_treatment_validation, apply_cp_internal_validation, apply_pipe_schedule_mapping_validation):
        """
        Validate m·ªôt d√≤ng d·ªØ li·ªáu v·ªõi t·∫•t c·∫£ c√°c quy t·∫Øc ENHANCED
        LOGIC: CP-INTERNAL ∆∞u ti√™n Rule 3 thay v√¨ Rule 1
        """
        errors = []
        
        try:
            # Ki·ªÉm tra xem c√≥ ph·∫£i CP-INTERNAL kh√¥ng
            is_cp_internal = False
            if col_c_name and not pd.isna(row[col_c_name]):
                system_type = str(row[col_c_name]).strip()
                is_cp_internal = (system_type == "CP-INTERNAL")
            
            # Rule 1: Array Number validation (B·ªé QUA n·∫øu CP-INTERNAL)
            if apply_array_validation and col_a_name and col_b_name and col_d_name and not is_cp_internal:
                array_result = self._check_array_number(row, col_a_name, col_b_name, col_d_name)
                if array_result != "PASS" and not array_result.startswith("SKIP"):
                    errors.append(f"Array: {array_result}")
            
            # Rule 2: Pipe Treatment validation
            if apply_pipe_treatment_validation and col_c_name and col_t_name:
                treatment_result = self._check_pipe_treatment(row, col_c_name, col_t_name)
                if treatment_result != "PASS" and not treatment_result.startswith("SKIP"):
                    errors.append(f"Treatment: {treatment_result}")
            
            # Rule 3: CP-INTERNAL Array Number validation (∆ØU TI√äN cao h∆°n Rule 1)
            if apply_cp_internal_validation and col_a_name and col_c_name and col_d_name:
                cp_internal_result = self._check_cp_internal_array(row, col_a_name, col_c_name, col_d_name)
                if cp_internal_result != "PASS" and not cp_internal_result.startswith("SKIP"):
                    errors.append(f"CP-Internal: {cp_internal_result}")
            
            # Rule 4: Pipe Schedule Mapping validation - ENHANCED
            if apply_pipe_schedule_mapping_validation and col_f_name and col_g_name and col_k_name:
                mapping_result = self._check_pipe_schedule_mapping_enhanced(row, col_f_name, col_g_name, col_k_name, col_l_name, col_m_name)
                if mapping_result != "PASS" and not mapping_result.startswith("SKIP"):
                    errors.append(f"Mapping: {mapping_result}")
            
            # Tr·∫£ v·ªÅ k·∫øt qu·∫£
            if errors:
                return f"FAIL: {'; '.join(errors[:4])}"  # Hi·ªÉn th·ªã 4 l·ªói ƒë·∫ßu
            else:
                return "PASS"
                
        except Exception as e:
            return f"ERROR: {str(e)}"
    
    def _check_array_number(self, row, col_a_name, col_b_name, col_d_name):
        """
        Rule 1: Ki·ªÉm tra Array Number format
        UPDATED LOGIC: Array Number should contain Cross Passage value
        """
        try:
            cross_passage = row[col_a_name]
            location_lanes = row[col_b_name]
            array_number = row[col_d_name]
            
            if pd.isna(cross_passage) or pd.isna(location_lanes) or pd.isna(array_number):
                return "SKIP: Thi·∫øu d·ªØ li·ªáu Cross Passage ho·∫∑c Array Number"
            
            # Chuy·ªÉn th√†nh string
            cross_passage_str = str(cross_passage).strip()
            actual_array = str(array_number).strip()
            
            # UPDATED LOGIC: Check if array number contains cross passage
            if cross_passage_str in actual_array:
                return "PASS"
            else:
                return f"Array Number '{actual_array}' c·∫ßn ch·ª©a '{cross_passage_str}'"
                
        except Exception as e:
            return f"ERROR: {str(e)}"

    def _check_pipe_treatment(self, row, col_c_name, col_t_name):
        """
        Rule 2: Ki·ªÉm tra Pipe Treatment
        """
        try:
            system_type = row[col_c_name]
            pipe_treatment = row[col_t_name]
            
            if pd.isna(system_type) or pd.isna(pipe_treatment):
                return "SKIP: Thi·∫øu d·ªØ li·ªáu System Type ho·∫∑c Pipe Treatment"
            
            system_type_str = str(system_type).strip()
            pipe_treatment_str = str(pipe_treatment).strip()
            
            # Quy t·∫Øc validation
            if system_type_str == "CP-INTERNAL":
                expected = "GAL"
                if pipe_treatment_str == expected:
                    return "PASS"
                else:
                    return f"CP-INTERNAL c·∫ßn '{expected}', nh·∫≠n '{pipe_treatment_str}'"
            
            elif system_type_str in ["CP-EXTERNAL", "CW-DISTRIBUTION", "CW-ARRAY"]:
                expected = "BLACK"
                if pipe_treatment_str == expected:
                    return "PASS"
                else:
                    return f"{system_type_str} c·∫ßn '{expected}', nh·∫≠n '{pipe_treatment_str}'"
            
            else:
                return "SKIP: System Type kh√¥ng thu·ªôc quy t·∫Øc"
                
        except Exception as e:
            return f"ERROR: {str(e)}"

    def _check_cp_internal_array(self, row, col_a_name, col_c_name, col_d_name):
        """
        Rule 3: Ki·ªÉm tra CP-INTERNAL Array Number matching
        """
        try:
            cross_passage = row[col_a_name]
            system_type = row[col_c_name]
            array_number = row[col_d_name]
            
            if pd.isna(system_type):
                return "SKIP: Thi·∫øu System Type"
            
            system_type_str = str(system_type).strip()
            
            # Ch·ªâ √°p d·ª•ng v·ªõi CP-INTERNAL
            if system_type_str != "CP-INTERNAL":
                return "SKIP: Kh√¥ng ph·∫£i CP-INTERNAL"
            
            if pd.isna(cross_passage) or pd.isna(array_number):
                return "SKIP: Thi·∫øu Cross Passage ho·∫∑c Array Number"
            
            cross_passage_str = str(cross_passage).strip()
            array_number_str = str(array_number).strip()
            
            if cross_passage_str == array_number_str:
                return "PASS"
            else:
                return f"CP-INTERNAL: Array Number '{array_number_str}' ph·∫£i tr√πng Cross Passage '{cross_passage_str}'"
                
        except Exception as e:
            return f"ERROR: {str(e)}"

    def _check_pipe_schedule_mapping_enhanced(self, row, col_f_name, col_g_name, col_k_name, col_l_name, col_m_name):
        """
        Rule 4: Ki·ªÉm tra Pipe Schedule Mapping - ENHANCED v·ªõi End-1/End-2
        """
        try:
            item_description = row[col_f_name] if col_f_name else None
            size = row[col_g_name] if col_g_name else None
            fab_pipe = row[col_k_name] if col_k_name else None
            end_1 = row[col_l_name] if col_l_name else None
            end_2 = row[col_m_name] if col_m_name else None
            
            if pd.isna(fab_pipe):
                return "SKIP: Thi·∫øu FAB Pipe"
            
            fab_pipe_str = str(fab_pipe).strip()
            
            # Check End-1/End-2 rules FIRST (NEW ENHANCED LOGIC)
            
            # Rule 4.3: If End-1 = "BE" OR End-2 = "BE" ‚Üí FAB Pipe should be "Fabrication"
            end_1_str = str(end_1).strip() if not pd.isna(end_1) else ""
            end_2_str = str(end_2).strip() if not pd.isna(end_2) else ""
            
            if end_1_str == "BE" or end_2_str == "BE":
                if fab_pipe_str == "Fabrication":
                    return "PASS"
                else:
                    return f"End-1/End-2 = 'BE' c·∫ßn FAB Pipe 'Fabrication', nh·∫≠n '{fab_pipe_str}'"
            
            # Rule 4.4: If BOTH End-1 AND End-2 are in ["RG", "TH"] ‚Üí FAB Pipe should be "Groove_Thread"  
            if (end_1_str in ["RG", "TH"]) and (end_2_str in ["RG", "TH"]):
                if fab_pipe_str == "Groove_Thread":
                    return "PASS"
                else:
                    return f"End-1 & End-2 thu·ªôc ['RG','TH'] c·∫ßn FAB Pipe 'Groove_Thread', nh·∫≠n '{fab_pipe_str}'"
            
            # Original mapping rules (if End-1/End-2 rules don't apply)
            
            # Rule 4.1: Item Description mapping
            if not pd.isna(item_description):
                item_description_str = str(item_description).strip()
                
                if "150-900" in item_description_str:
                    expected = "STD ARRAY TEE"
                    if fab_pipe_str == expected:
                        return "PASS"
                    else:
                        return f"Item '150-900' c·∫ßn FAB Pipe '{expected}', nh·∫≠n '{fab_pipe_str}'"
                
                elif "65-4730" in item_description_str:
                    expected = "STD 1 PAP RANGE"
                    if fab_pipe_str == expected:
                        return "PASS"
                    else:
                        return f"Item '65-4730' c·∫ßn FAB Pipe '{expected}', nh·∫≠n '{fab_pipe_str}'"
                
                elif "65-5295" in item_description_str:
                    expected = "STD 2 PAP RANGE"
                    if fab_pipe_str == expected:
                        return "PASS"
                    else:
                        return f"Item '65-5295' c·∫ßn FAB Pipe '{expected}', nh·∫≠n '{fab_pipe_str}'"
            
            # Rule 4.2: Size mapping
            if not pd.isna(size):
                size_str = str(size).strip()
                if size_str == "40":
                    expected = "Groove_Thread"
                    if fab_pipe_str == expected:
                        return "PASS"
                    else:
                        return f"Size '40' c·∫ßn FAB Pipe '{expected}', nh·∫≠n '{fab_pipe_str}'"
            
            return "SKIP: Kh√¥ng thu·ªôc quy t·∫Øc mapping"
            
        except Exception as e:
            return f"ERROR: {str(e)}"    def _show_sample_errors(self, df, sheet_name, col_c_name, col_d_name, col_f_name, col_g_name, col_k_name, col_l_name, col_m_name, col_t_name):
        """
        Hi·ªÉn th·ªã T·∫§T C·∫¢ l·ªói v·ªõi th√¥ng tin v·ªã tr√≠ chi ti·∫øt (Worksheet + Row + Column)
        """
        fail_df = df[df['Validation_Check'] != 'PASS']
        
        if len(fail_df) == 0:
            print("‚ú® Kh√¥ng c√≥ l·ªói n√†o!")
            return
        
        print(f"‚ö†Ô∏è  HI·ªÇN TH·ªä T·∫§T C·∫¢ {len(fail_df)} L·ªñI CHO WORKSHEET '{sheet_name}':")
        print()
        
        # Ch·ªçn c·ªôt hi·ªÉn th·ªã
        display_cols = []
        if col_c_name: display_cols.append(col_c_name)
        if col_d_name: display_cols.append(col_d_name)  
        if col_f_name: display_cols.append(col_f_name)
        if col_g_name: display_cols.append(col_g_name)
        if col_k_name: display_cols.append(col_k_name)
        if col_l_name: display_cols.append(col_l_name)  # End-1
        if col_m_name: display_cols.append(col_m_name)  # End-2
        if col_t_name: display_cols.append(col_t_name)
        display_cols.append('Validation_Check')
          for idx, (original_idx, row) in enumerate(fail_df.iterrows(), 1):
            # Excel row number = pandas index + 2 (header = row 1, data starts from row 2)
            excel_row = original_idx + 2
            print(f"üî∏ L·ªói {idx} - WORKSHEET: '{sheet_name}' - H√ÄNG {excel_row} (Excel):")
            
            # Map column names to Excel column letters for easier identification
            col_mapping = {
                col_c_name: 'C (System Type)',
                col_d_name: 'D (Array Number)', 
                col_f_name: 'F (Item Description)',
                col_g_name: 'G (Size)',
                col_k_name: 'K (FAB Pipe)',
                col_l_name: 'L (End-1)',
                col_m_name: 'M (End-2)',
                col_t_name: 'T (Pipe Treatment)',
                'Validation_Check': 'Validation_Check'
            }
            
            for col in display_cols:
                if col in row:
                    value = row[col]
                    col_display = col_mapping.get(col, col) if col in col_mapping else col
                    if col == 'Validation_Check' and str(value).startswith('FAIL'):
                        print(f"   üî¥ {col_display}: {value}")
                    else:
                        print(f"   ‚ö™ {col_display}: {value}")
            print()    def _generate_summary(self):
        """
        T·∫°o b√°o c√°o t·ªïng k·∫øt ENHANCED v·ªõi h∆∞·ªõng d·∫´n s·ª≠a l·ªói
        """
        print("=" * 80)
        print("üìä T·ªîNG K·∫æT VALIDATION - ENHANCED VERSION")
        print("=" * 80)
        print(f"T·ªïng s·ªë d√≤ng ƒë√£ ki·ªÉm tra: {self.total_rows}")
        print(f"‚úÖ PASS: {self.total_pass} ({self.total_pass/self.total_rows*100:.1f}%)")
        print(f"‚ùå FAIL: {self.total_fail} ({self.total_fail/self.total_rows*100:.1f}%)")
        print()
        
        # Chi ti·∫øt theo worksheet
        for sheet_name, df in self.validation_results.items():
            total = len(df)
            passes = len(df[df['Validation_Check'] == 'PASS'])
            fails = len(df[df['Validation_Check'] != 'PASS'])
            print(f"üìã {sheet_name}: {passes}/{total} PASS ({passes/total*100:.1f}%)")
        
        # H∆∞·ªõng d·∫´n s·ª≠a l·ªói
        if self.total_fail > 0:
            print()
            print("üîß H∆Ø·ªöNG D·∫™N S·ª¨A L·ªñI:")
            print("   1. Xem th√¥ng tin l·ªói ·ªü tr√™n: WORKSHEET + H√ÄNG + C·ªòT")
            print("   2. M·ªü file Excel g·ªëc")
            print("   3. ƒêi ƒë·∫øn Worksheet ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh")
            print("   4. ƒêi ƒë·∫øn H√†ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (v√≠ d·ª•: H√ÄNG 218)")
            print("   5. S·ª≠a gi√° tr·ªã trong c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (A, C, D, F, G, K, L, M, T)")
            print("   6. L∆∞u file v√† ch·∫°y l·∫°i validation")
            print()
            print("üìù V√ç D·ª§ S·ª¨A L·ªñI:")
            print("   üî∏ L·ªói: WORKSHEET 'Pipe Schedule' - H√ÄNG 218")
            print("   üî¥ L (End-1): RG, M (End-2): RG ‚Üí c·∫ßn FAB Pipe 'Groove_Thread'")
            print("   ‚Üí S·ª≠a: ƒêi ƒë·∫øn Pipe Schedule, h√†ng 218, c·ªôt K, ƒë·ªïi th√†nh 'Groove_Thread'")
        print()

    def _export_results(self, excel_file_path):
        """
        Xu·∫•t k·∫øt qu·∫£ validation ra file Excel
        """
        try:
            # T·∫°o t√™n file output
            input_path = Path(excel_file_path)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"validation_enhanced_{input_path.stem}_{timestamp}.xlsx"
            output_path = input_path.parent / output_filename
            
            print(f"üíæ Xu·∫•t k·∫øt qu·∫£ ra: {output_filename}")
            
            # Xu·∫•t t·ª´ng sheet
            with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                for sheet_name, df in self.validation_results.items():
                    df.to_excel(writer, sheet_name=sheet_name, index=False)
            
            print("‚úÖ Xu·∫•t file th√†nh c√¥ng!")
            return str(output_path)
            
        except Exception as e:
            print(f"‚ùå L·ªói xu·∫•t file: {e}")
            return None

def main():
    """
    H√†m main ƒë·ªÉ ch·∫°y validation tool ENHANCED
    """
    print("üîç T√¨m file Excel...")
    
    # T√¨m file Excel trong th∆∞ m·ª•c hi·ªán t·∫°i
    current_dir = Path(".")
    excel_files = list(current_dir.glob("*.xlsx"))
    
    if not excel_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file Excel (.xlsx) n√†o!")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    if len(excel_files) == 1:
        selected_file = excel_files[0]
        print(f"üìÅ T√¨m th·∫•y 1 file: {selected_file.name}")
    else:
        print(f"üìÅ T√¨m th·∫•y {len(excel_files)} file Excel:")
        for i, file in enumerate(excel_files, 1):
            print(f"   {i}. {file.name}")
        
        while True:
            try:
                choice = int(input("\nCh·ªçn file (nh·∫≠p s·ªë): ")) - 1
                if 0 <= choice < len(excel_files):
                    selected_file = excel_files[choice]
                    break
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
    
    # Ch·∫°y validation ENHANCED
    validator = ExcelValidatorEnhanced()
    output_file = validator.validate_excel_file(str(selected_file))
    
    if output_file:
        print("üéâ VALIDATION ENHANCED HO√ÄN TH√ÄNH!")
        print(f"üìÑ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_file}")
    else:
        print("‚ùå Validation th·∫•t b·∫°i!")
    
    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main()
